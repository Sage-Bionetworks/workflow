# Passwords and credentials do not belong in these files, pass them as VM args instead

# All default properties belong in this file

#---- Endpoint configuration
# Crowd url must include protocol (http or https) and port (e.g. 8443)
org.sagebionetworks.crowd.endpoint=https://crowd-dev.sagebase.org:8443
org.sagebionetworks.authenticationservice.endpoint=${org.sagebionetworks.authenticationservice.endpoint}
org.sagebionetworks.repositoryservice.endpoint=${org.sagebionetworks.repositoryservice.endpoint}
org.sagebionetworks.portal.endpoint=${org.sagebionetworks.portal.endpoint}

#---- S3 configuration
org.sagebionetworks.s3.readAccessExpiryMinutes=1440
org.sagebionetworks.s3.writeAccessExpiryMinutes=1440
org.sagebionetworks.s3.bucket=devThisIsAFakeS3Bucket
org.sagebionetworks.s3.iam.group=devThisIsAFakeS3IamGroup

#---- Integration test configuration
org.sagebionetworks.integration.debug=false
# TODO this goes away when the auth service has crowd stubbed out and we can 
# use integration.test+adminuser@sagebase.org, integration.test+normaluser@sagebase.org, etc...
org.sagebionetworks.integrationTestUser=admin

#---- SNS Topics
org.sagebionetworks.sns.topic.tcgaworkflow=arn:aws:sns:us-east-1:325565585839:TestTCGACurationWorkflow

#--- encrypted values (passwords, credentials):
#
# to generate an encrypted property value:
# mvn exec:java -Dexec.mainClass="org.sagebionetworks.StringEncrypter" -Dexec.args="MySecretPassword common-encryption-key-for-stack"
# returns 
# MySecretPassword -> PZnry4SROFQVIq1up8DIt8uxV8TkD0Ve
# The actual encryption key is saved in work/platform/PasswordsAndCredentials/platformPropertyEncryptionKey.txt

# application API Key, used for Crowd REST API  NOTE:  This is for the dev instance of Crowd
org.sagebionetworks.crowdApplicationKey=YJxbfSsxenhUbwz9IVQaOA==

org.sagebionetworks.id.generator.database.driver=com.mysql.jdbc.Driver
org.sagebionetworks.repository.databaes.driver=com.mysql.jdbc.Driver

# The repository connection pool properties.
org.sagebionetworks.pool.connection.validate=true
# This is the SQL that will be used to determine if a connection is alive.
org.sagebionetworks.pool.connection.validate.sql=SELECT 1
# The minimum number of connections maintained by the connection pool.
org.sagebionetworks.pool.min.number.connections=2
# The maximum number of connections the connection pool will created
org.sagebionetworks.pool.max.number.connections=40

# JDOPersistenceManager configuration properties.
javax.jdo.PersistenceManagerFactoryClass=org.datanucleus.jdo.JDOPersistenceManagerFactory
datanucleus.NontransactionalRead=true
datanucleus.NontransactionalWrite=true
javax.jdo.option.RetainValues=true
datanucleus.autoCreateSchema=true
datanucleus.validateConstraints=false
datanucleus.validateTables=false
datanucleus.transactionIsolation=read-committed



