<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
       
	<!-- Trun on Spring's auotproxy using AspectJ's @Aspect annotations. -->
	<aop:aspectj-autoproxy />
	
	<!-- Import the stack configuration -->
	<import resource="stack-configuration.spb.xml" />

 	<!-- This is serving as the JDBC connection pool -->
	<bean id="dataSourcePool" class="org.apache.commons.dbcp.BasicDataSource"	destroy-method="close" depends-on="stackConfiguration"> 
		<property name="driverClassName" ref="stackConfiguration.repositoryDatabaseDriver" />
		<property name="url" ref="stackConfiguration.repositoryDatabaseConnectionUrl" />
		<property name="username" ref="stackConfiguration.repositoryDatabaseUsername" />
		<property name="password" ref="stackConfiguration.repositoryDatabasePassword" />
		<!-- The minimum number of connections in the pool at all times -->
		<property name="minIdle" ref="stackConfiguration.databaseConnectionPoolMinNumberConnections" />
		<!-- The maximum number of connections in the pool -->
		<property name="maxActive" ref="stackConfiguration.databaseConnectionPoolMaxNumberConnections"/>
		<!-- This will test a connection to see if it is alive when a connection 
			is fetched from the pool -->
		<property name="testOnBorrow" ref="stackConfiguration.databaseConnectionPoolShouldValidate"/>
		<!-- This is the SQL uses to test if a connection is alive -->
		<property name="validationQuery" ref="stackConfiguration.databaseConnectionPoolValidateSql"/>
	</bean>
	
		<!-- A profiler that logs performance data for all bean method calls. -->
	<bean id="poolLogger" class="org.sagebionetworks.repo.model.jdo.ConnectionPoolLogger" />

	<!-- PMF Bean -->
	<bean id="pmf" class="org.datanucleus.jdo.JDOPersistenceManagerFactory" destroy-method="close" depends-on="poolLogger">
<!--		<constructor-arg ref="stackConfiguration.repositoryJDOConfigurationMap" />-->
		<property name="options" ref="stackConfiguration.repositoryJDOConfigurationMap"/>
		<property name="connectionFactory" ref="dataSourcePool" />
	</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="jdoTransactionManager" />

	<!-- Transaction Manager for PMF -->
	<bean id="jdoTransactionManager" class="org.springframework.orm.jdo.JdoTransactionManager">
		<property name="persistenceManagerFactory">
			<ref local="pmf" />
		</property>
	</bean>

	<!-- Template hides most of the actions from our daos -->
	<bean id="jdoTemplate" class="org.springframework.orm.jdo.JdoTemplate">
		<property name="persistenceManagerFactory">
			<ref local="pmf" />
		</property>
	</bean>

	<bean id="simpleJdbcTempalte" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
		<constructor-arg ref="dataSourcePool"></constructor-arg>
	</bean>


    <!-- Depends on ID-generator. -->
	<import resource="id-generator.spb.xml"/>
	<bean id="nodeDao" class="org.sagebionetworks.repo.model.jdo.NodeDAOImpl" depends-on="idGenerator" />

	<bean id="userGroupDAO" class="org.sagebionetworks.repo.model.jdo.JDOUserGroupDAOImpl" />

	<!-- The node query dao singleton -->
	<bean id="fieldTypeDao" class="org.sagebionetworks.repo.model.jdo.JDOFieldTypeDAOImpl" />

	<!-- The node query dao singleton -->
	<bean id="nodeQueryDao" class="org.sagebionetworks.repo.model.query.jdo.JDONodeQueryDaoImpl" />

	<!-- Controls how nodes inherit their permissions -->
	<bean id="nodeInheritanceDao" class="org.sagebionetworks.repo.model.jdo.JDONodeInheritanceDAOImpl" />

</beans>