package org.sagebionetworks.repo.model.jdo.persistence;

import java.io.Serializable;
import java.util.StringTokenizer;

import javax.jdo.identity.LongIdentity;

/**
 * The composite primary key for a reference is its reference holder Node.id +
 * reference target Node.id + reference target RevisionNumber + group name.
 * 
 * @author jmhill
 * 
 */
@SuppressWarnings("serial")
public class ReferenceId implements Serializable {
	/**
	 * The id of of the node holding the reference
	 */
	public LongIdentity owner;
	/**
	 * The id of the node to which this reference refers
	 */
	public Long targetId;
	/**
	 * The revision of the node to which this reference refers
	 */
	public Long targetRevision;
	/**
	 * The name of the reference group to which this reference belongs
	 */
	public String groupName;

	/**
	 * 
	 */
	public ReferenceId() {
	}

	/**
	 * Create a new ReferenceId from the three ids.
	 * 
	 * @param owner
	 * @param targetId
	 * @param targetRevision
	 * @param groupName 
	 */
	public ReferenceId(Long owner, Long targetId,
			Long targetRevision, String groupName) {
		this.owner = new LongIdentity(JDONode.class, owner); // field1
		this.targetId = targetId; // field2
		this.targetRevision = targetRevision; // field3
		this.groupName = groupName; // field4
	}

	/**
	 * Constructor accepting same input as generated by toString().
	 * @param value 
	 */
	public ReferenceId(String value) {
		StringTokenizer token = new StringTokenizer(value, "::");
		token.nextToken(); // className
		this.owner = new LongIdentity(JDONode.class, Long
				.parseLong(token.nextToken())); // field1
		this.targetId = Long.parseLong(token.nextToken()); // field2
		this.targetRevision = Long.parseLong(token.nextToken()); // field3
		this.groupName = token.nextToken(); // field4
	}

	@Override
	public String toString() {
		// Give output expected by String constructor
		return this.getClass().getName() + "::" + this.owner + "::"
				+ this.targetId + "::" + this.targetRevision + "::" + this.groupName;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((groupName == null) ? 0 : groupName.hashCode());
		result = prime * result + ((owner == null) ? 0 : owner.hashCode());
		result = prime * result
				+ ((targetId == null) ? 0 : targetId.hashCode());
		result = prime * result
				+ ((targetRevision == null) ? 0 : targetRevision.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ReferenceId other = (ReferenceId) obj;
		if (groupName == null) {
			if (other.groupName != null)
				return false;
		} else if (!groupName.equals(other.groupName))
			return false;
		if (owner == null) {
			if (other.owner != null)
				return false;
		} else if (!owner.equals(other.owner))
			return false;
		if (targetId == null) {
			if (other.targetId != null)
				return false;
		} else if (!targetId.equals(other.targetId))
			return false;
		if (targetRevision == null) {
			if (other.targetRevision != null)
				return false;
		} else if (!targetRevision.equals(other.targetRevision))
			return false;
		return true;
	}


}
